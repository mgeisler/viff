
TODO list for pysmpc. Roughly ordered in order of priority.

* Seeds for random number generators
   Use one random seed for entire program execution, print this at
   program start. Allow the user to specify another seed on the
   command line.

* Benchmark Python vs. GMPY on different key sizes
   Initial tests seems to indicate that the network is the
   bottle-neck, but this should be systematically checked.

* Profile and optimize
   We need to see if the time is spend on network latency or in the
   CPU. If the latter is the case, then we could consider writing the
   inner loop in C for more speed.

* Remove program counters
   An idea for this was suggested by Thomas Mølhave: label each share
   with a tuple containing the labels of the shares that it depend on
   in addition to the operation done. Consider:

   a, b = rt.share(10)
   c = rt.mul(a,b)

   Here a and b get labels ('share', 1) and ('share', 2), and c get
   the label ('mul', ('share', 1), ('share', 2)). If we continue with

   d = rt.add(c,c)

   the label for d would be

   ('add', ('mul', ('share', 1), ('share', 2)),
           ('mul', ('share', 1), ('share', 2)))

   The labels grow exponentially in the length of dependencies! This
   length roughly corresponds to the old notion of communication
   rounds. One could trim the labels when it is known that old labels
   aren't needed anymore.

   Consider this program:

   x = rt.add(a,b)
   y = rt.add(a,b)

   Here x and y have the same label and are thus indistinguishable
   when sent over the network. Since x and y have the exact same
   history, and so represent the same value, this ought to cause no
   trouble.

* Have an option which will make things run more or less sequentially
   For example: no parallelism would mean that all operations queue up
   and wait on each other, semi-parallelism could mean that different
   operations (mul and greater_than, say) queue up, and full parallism
   would run with no restrictions except those imposed by the program
   itself.

* Provide a small install-daimi.sh shell script which will set up
   PYTHONPATH corrrectly for people on DAIMI?

* Merge GMPIntegerFieldElement and IntegerFieldElement?
   The two classes are almost identical and should be merged.

* Define and document a semantics for operations on deferred shares
   Variables containing deferred shares should be immutable.
   Operations like add and mul already obey this: add(x,y) does not
   change x and y. The open method changes its argument.
